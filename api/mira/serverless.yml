app: animl
org: animl
service: mira

# frameworkVersion: '1'

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
    - .test/**

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-west-1
  profile: animl
  iamManagedPolicies: 
    - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
    - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
  apiGateway:
    # tells API Gateway to treat multipart/form-data requests as binary type 
    # and parse request body into base64 format
    binaryMediaTypes:
      - 'multipart/form-data'
    #  - '*/*' # or maybe wildcard?

# TODO: when we implement a queuing system, look into Lambda "destinations"
# for async invocation:
# https://www.serverless.com/framework/docs/providers/aws/guide/functions#asynchronous-invocation
# https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations

functions:
  MiraClassify:
    handler: handler.handler
    name: MiraClassifyLambdaFunction-${opt:stage, self:provider.stage, 'dev'}
    description: Run inference on images with Mira models 
    # role: arn:aws:iam::719729260530:role/animl-lambda-role # different role? should this be defined in serverless? moved up to service level? 
    events:
     - http:
         path: classify
         method: post
         cors: true 

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  pythonRequirements:
    dockerizePip: true

plugins:
  - serverless-python-requirements
  - serverless-offline